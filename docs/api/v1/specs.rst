APIv1 Specs
===========
.. versionadded:: 2.1.0

.. warning::
    If you don't send a request as POST, you won't get any results.

.. note::
    The examples given just directly use :func:`requests.post`, instead of using a wrapper,
    or even considering the rate limit.

    *Practice safe URL shortening*: use a wrapper.

The v1 URL base is ``/api/v1``; this is the base of all the API URLs.

This documentation simply states the POST data you must include for which function you'd like to access.

Failure to include any of this data will result in a ``6 Partial Form Data`` error response.

Enabling
--------
.. versionchanged:: 2.1.0

The API has to be intentionally enabled in your configuration file; it's disabled by default.

At the time of writing, this is done by setting ``api_enabled`` to ``true``.

If the API is disabled, all requests will simply be returned with an error, and no processing takes place.

API Keys
--------

The API key you use will have to be generated by the chr instance owner.

It must be included in **every** request, and it must be valid, or else you're not going to be doing anything.

``api_key``
^^^^^^^^^^^
.. note::
    This is *case-sensitive*, so copy and paste your key as displayed in the database.

This should be a string.

Shrinking
---------
The URL shrinking API can be accessed at the url: ``/api/v1/submit``

``long``
^^^^^^^^
This is the URL you'd like to shorten.

It should be a string, and conform to the basic shape of a URL, or else it will get rejected.

``short``
^^^^^^^^^
If you'd like a custom URL for your URL, you will use this.

If you don't want a custom URL, simply leave this blank.

This should be a string, and only be comprised of **alphanumeric characters**, **dashes** and **underscores**.

``delete``
^^^^^^^^^^
.. note::
    Once you get this, that's it. You can't get it again. Store this somewhere permanent.

If you want a deletion key to be returned, this field needs to be set to a non-blank value.

If you don't want the deletion key to be returned (it will still exist, but is merely not returned), leave this blank.

This should be either an empty string, or any non-empty string value.

Example request
^^^^^^^^^^^^^^^
.. code-block:: python

  >>> import requests, pprint
  >>> data = {
  ...   "api_key": "...",
  ...   "long": "http://some-really-really-really.overly.long/url-will#go_here",
  ...   "short": "",
  ...   "delete": "true"
  ... }
  ...
  >>> r = requests.post("http://chr.so/api/v1/submit", data)
  >>> pprint.pprint(r.json)
  {u'delete': u'XXXXXXXXXX',
   u'enum': 0,
   u'error': u'false',
   u'given': u'http://some-really-really-really.overly.long/url-will#go_here',
   u'message': u'Successfully shrunk your URL!',
   u'url': u'http://chr.so/YY',
   u'short': u'YY'}
  >>>

Statistics
----------
The URL statistics API can be accessed at the URL: ``/api/v1/stats``

``short``
^^^^^^^^^
This is the shortened URL you'd like statistics for.

Example request
^^^^^^^^^^^^^^^
.. code-block:: python

  >>> import requests, pprint
  >>> data = {
  ...   "api_key": "...",
  ...   "short": "YY"
  ... }
  ...
  >>> r = requests.post("http://chr.so/api/v1/stats", data)
  >>> pprint.pprint(r.json)
  {u'clicks': {u'browsers': {u'firefox': 1, u'unknown': 0},
               u'pd': {u'01/07': 0,
                          ...
                       u'02/05': 1},
               u'platforms': {u'linux': 1, u'unknown': 0}},
   u'enum': 0,
   u'error': u'false',
   u'hits': {u'all': 1, u'ratio': u'0', u'return': 0, u'unique': 1},
   u'long': u'http://some-really-really-really.overly.long/url-will#go_here',
   u'long_clip': u'http://some-really-really-real...',
   u'message': u'Here are your stats, piping hot from the oven!',
   u'short': u'YY',
   u'short_url': u'http://deku:8080/YY'}
  >>>

Deletion
--------
The URL deletion API can be accessed at the URL: ``/api/v1/delete``

``short``
^^^^^^^^^
This is the shortened URL you'd like to delete.

It should be either the short ID representation, or the custom URL (special char included) of the URL, like ``F0o`` or ``+foo``.

``delete``
^^^^^^^^^^
This is the deletion key given when the URL was created.

If you don't have this, that's a darn shame, you aren't able to delete it.

Example request
^^^^^^^^^^^^^^^
.. code-block:: python

  >>> import requests, pprint
  >>> data = {
  ...   "api_key": "...",
  ...   "short": "YY",
  ...   "delete": "XXXXXXXXXX"
  ... }
  ...
  >>> r = requests.post("http://chr.so/api/v1/delete", data)
  >>> pprint.pprint(r.json)
  {u'enum': 0,
   u'error': u'false',
   u'message': u'Successfully deleted http://chr.so/YY'}
  >>>

Expanding
---------
The URL expansion API can be accessed at the URL: ``/api/v1/expand``

``short``
^^^^^^^^^
This is the shortened URL you'd like to expand to the long form.

Example request
^^^^^^^^^^^^^^^
.. code-block:: python

  >>> import requests, pprint
  >>> data = {
  ...   "api_key": "...",
  ...   "short": "YY"
  ... }
  ...
  >>> r = requests.post("http://chr.so/api/v1/expand", data)
  >>> pprint.pprint(r.json)
  {u'enum': 0,
   u'error': u'false',
   u'long': u'http://some-really-really-really.overly.long/url-will#go_here',
   u'short': u'YY',
   u'message': u"Here's the expanded URL"}
  >>>

Rules
-----
.. warning::
    Failure to adhere to these rules will likely result with a ban from the API.

Rate limiting
^^^^^^^^^^^^^
.. note::
    In the official chr api, more than 1 request per second (over a maximum of five burst requests) will result in HTTP 503 responses.

    Continued hammering will result in a ban at a CloudFlare or iptables level.

For the love of God, don't hammer the API.

Send a maximum of one request per second.

Use a wrapper with rate limiting in place, or implement rate limiting to your requests.

Replies
-------

Format
^^^^^^
.. versionchanged:: 2.1.0

.. note::
  Not all of these will be present, so use some sort of ``dict.has_key`` to check first.

Replies are all sent in JSON format (``Content-Type: application/json``), and adhere to this style.

.. code-block:: javascript
    
    {
        "error": "false",
        "enum": 0,
        "message": "Reply message here.",
        "foo": "bar",
        "baz": "qux"
    }

The parts are:

``error``
  Is this reply an error reply, or is it valid?

  Either ``true`` or ``false``

``enum``
  What is the reply number given to this reply?

  ``0``, ``1``, ``2``, etc. Differs based on reply.

``message``
  The plain text error you can show to users if required.

  Differs based on reply.

Others
  These differ based on what sort of API call you're making.

  The above three are guaranteed, the rest may change.

Numbers
^^^^^^^
.. versionchanged:: 2.1.0

Each reply is given a number, given in the reply as ``enum``.

``-1`` **Not Post**
  You sent a GET request, when a POST was required.

``0`` **OK**
  Your API request went through successfully, all according to plan.

``1`` **API Disabled**
  You attempted to access the API, but it's been disabled by the app.

``2`` **Captcha Incorrect**
  Google reported your captcha as incorrectly typed.

``3`` **Url Too Long**
  The URL provided was horrendously long, and we aren't going to waste space on it.

  Seems counter productive, I know; but by default it's 512 characters, so it's an alright idea.

``4`` **Url Invalid**
  The URL provided did not pass the various stages of validation.

``5`` **Custom Url Invalid**
  There was a problem with the custom URL requested.

  This is used for more than one reply, all relating to the custom URL.

``6`` **Partial Form Data**
  A required piece of form data was left out of the API request.

``7`` **No Such Key**
  The API key given does not exist.

``8`` **No Such URL**
  The given shortened URL does not exist.

``9`` **Deletion Invalid**
  The given URL deletion key is invalid.

``10`` **Deletion Failed**
  Something went wrong deleting your URL.